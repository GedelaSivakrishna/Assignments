/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Employee;
import org.openapitools.client.model.EmployeeDto;
import org.openapitools.client.model.SalariedEmployees;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmployeeControllerApi
 */
@Disabled
public class EmployeeControllerApiTest {

    private final EmployeeControllerApi api = new EmployeeControllerApi();

    /**
     * Add Employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addEmployeeTest() throws ApiException {
        Integer deptId = null;
        EmployeeDto employeeDto = null;
        Employee response = api.addEmployee(deptId, employeeDto);
        // TODO: test validations
    }

    /**
     * Add Employee to department
     *
     * Employee Id &amp; Department Id should be valid 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addEmployeeToDepartmentTest() throws ApiException {
        Integer empId = null;
        Integer deptId = null;
        Employee response = api.addEmployeeToDepartment(empId, deptId);
        // TODO: test validations
    }

    /**
     * List all Employees
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void allEmployeesTest() throws ApiException {
        List<Employee> response = api.allEmployees();
        // TODO: test validations
    }

    /**
     * Delete Employee
     *
     * Employee should exist
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmployeeTest() throws ApiException {
        Integer empId = null;
        String response = api.deleteEmployee(empId);
        // TODO: test validations
    }

    /**
     * Department employees
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void employeesAndDepartmentTest() throws ApiException {
        String deptName = null;
        Object response = api.employeesAndDepartment(deptName);
        // TODO: test validations
    }

    /**
     * Employees in Batch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void employeesInBatchTest() throws ApiException {
        Integer pageNo = null;
        Integer size = null;
        String sortBy = null;
        String order = null;
        Object response = api.employeesInBatch(pageNo, size, sortBy, order);
        // TODO: test validations
    }

    /**
     * Department employees count
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void employeesInDepartmentTest() throws ApiException {
        List<Object> response = api.employeesInDepartment();
        // TODO: test validations
    }

    /**
     * Employee joined recently
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void employeesJoinedInTest() throws ApiException {
        String key = null;
        Integer value = null;
        Object response = api.employeesJoinedIn(key, value);
        // TODO: test validations
    }

    /**
     * Find Employees with salary greater than
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void employeesWithSalaryGreaterThanTest() throws ApiException {
        Double amount = null;
        Object response = api.employeesWithSalaryGreaterThan(amount);
        // TODO: test validations
    }

    /**
     * Update Employees salary
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void incrementEmployeesSalaryTest() throws ApiException {
        Float percent = null;
        String response = api.incrementEmployeesSalary(percent);
        // TODO: test validations
    }

    /**
     * Remove Employee from department
     *
     * Employee Id &amp; Department Id should be valid 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeEmployeeFromDepartmentTest() throws ApiException {
        Integer empId = null;
        Integer deptId = null;
        Employee response = api.removeEmployeeFromDepartment(empId, deptId);
        // TODO: test validations
    }

    /**
     * Top Three salaried employees
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topThreeHighestPaidEmployeesTest() throws ApiException {
        List<SalariedEmployees> response = api.topThreeHighestPaidEmployees();
        // TODO: test validations
    }

    /**
     * Transfer Employees Department
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transferEmployeeDepartmentTest() throws ApiException {
        Integer empId = null;
        Integer fromDeptId = null;
        Integer toDeptId = null;
        Employee response = api.transferEmployeeDepartment(empId, fromDeptId, toDeptId);
        // TODO: test validations
    }

    /**
     * Update Employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmployeeTest() throws ApiException {
        Integer empId = null;
        EmployeeDto employeeDto = null;
        Employee response = api.updateEmployee(empId, employeeDto);
        // TODO: test validations
    }

}
